export function buildSummary(results, errors, totalAnalyzed, duration) {
  const bullish = [];
  const bearish = [];
  const neutral = [];

  results.forEach((res) => {
    if (!res) return;

    if (res.startsWith("üöÄ")) {
      bullish.push(res);
    } else if (res.startsWith("üîª")) {
      bearish.push(res);
    } else if (res.startsWith("‚öñÔ∏è")) {
      neutral.push(res);
    } else if (res.startsWith("‚ùå")) {
      errors.push(res);
    }
  });

  let summary = `üìä R√©sum√© Analyse H1 (${new Date().toLocaleTimeString()}):\n`;
  summary += `- Analyse effectu√©e en ${duration}s\n`;
  summary += `- Cryptos analys√©es : ${totalAnalyzed}\n`;
  summary += `- Signaux d√©tect√©s : ${results.length}\n`;
  summary += `- Erreurs : ${errors.length}\n\n`;

  if (bullish.length > 0) {
    summary += "üöÄ **Dojis haussiers d√©tect√©s**:\n";
    summary += bullish.join("\n") + "\n\n";
  }

  if (bearish.length > 0) {
    summary += "üîª **Dojis baissiers d√©tect√©s**:\n";
    summary += bearish.join("\n") + "\n\n";
  }

  if (neutral.length > 0) {
    summary += "‚öñÔ∏è **Dojis neutres d√©tect√©s**:\n";
    summary += neutral.join("\n") + "\n\n";
  }

  if (errors.length > 0) {
    summary += "‚ùå **Erreurs rencontr√©es**:\n";
    summary += errors.join("\n") + "\n\n";
  }

  if (
    bullish.length === 0 &&
    bearish.length === 0 &&
    neutral.length === 0 &&
    errors.length === 0
  ) {
    summary += "‚úÖ Aucun signal d√©tect√©.";
  }

  return summary.trim();
}
